import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# === –ó–∞–≥—Ä—É–∑–∫–∞ FAQ ===
with open('faq.json', 'r', encoding='utf-8') as f:
    FAQ = json.load(f)

# === –ö–Ω–æ–ø–∫–∏ ===
MAIN_KEYBOARD = [
    ["–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü"],
    ["–°–≤—è–∑–∞—Ç—å—Å—è —Å HR"]
]
reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
    if text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü" or "–∑–ø" in text.lower() or "–∑–∞—Ä–ø–ª–∞—Ç" in text.lower():
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
        await update.message.reply_text("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞...")
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2025: **87 500 ‚ÇΩ**", parse_mode="Markdown")
        return

    if text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å HR":
        await update.message.reply_text("üìß –ù–∞–ø–∏—à–∏—Ç–µ –≤ HR-–æ—Ç–¥–µ–ª: hr@company.com –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ +7 (XXX) XXX-XX-XX.")
        return

    if text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        questions = "\n".join([f"‚Ä¢ {q}" for q in FAQ.keys()])
        await update.message.reply_text(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{questions}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!")
        return

    # –ü–æ–∏—Å–∫ –≤ FAQ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    for question, answer in FAQ.items():
        if text.lower() in question.lower() or question.lower() in text.lower():
            await update.message.reply_text(answer)
            return

    # –ù–µ –Ω–∞–π–¥–µ–Ω–æ
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. üòï\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ HR."
    )

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def notify_salary_sent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_salary_sent <user_id>")
        return
    try:
        target_id = int(context.args[0])
        await context.bot.send_message(
            chat_id=target_id,
            text="‚úÖ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –±–∞–Ω–∫ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã."
        )
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("notify_salary_sent", notify_salary_sent))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ FAQ!")
    application.run_polling()

if __name__ == "__main__":
    main()
