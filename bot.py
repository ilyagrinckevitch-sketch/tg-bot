import os
import json
import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))  # 0 ‚Äî –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

# === –ó–∞–≥—Ä—É–∑–∫–∞ FAQ ===
with open('faq.json', 'r', encoding='utf-8') as f:
    FAQ = json.load(f)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
MAIN_KEYBOARD = [
    ["–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü"],
    ["–°–≤—è–∑–∞—Ç—å—Å—è —Å HR"]
]
reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

# === –§—É–Ω–∫—Ü–∏—è "–∑–∞—Ä–ø–ª–∞—Ç–∞" (–∑–∞–≥–ª—É—à–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π) ===
def get_salary_info(user_id: int) -> str:
    """
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –∑–∞–ø—Ä–æ—Å –∫ –ë–î –ø–æ user_id –∏–ª–∏ telegram_id.
    –°–µ–π—á–∞—Å: –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID (–¥–ª—è –¥–µ–º–æ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ).
    """
    # –ü—Ä–∏–º–µ—Ä: —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö ID (–¥–ª—è –∂–∏–≤–æ—Å—Ç–∏)
    salaries = {
        123456789: "92 300 ‚ÇΩ",
        987654321: "78 500 ‚ÇΩ",
    }
    salary = salaries.get(user_id, "85 000 ‚ÇΩ")  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return f"–í–∞—à–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2025: **{salary}**"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    text_lower = text.lower()

    # --- –ó–∞—Ä–ø–ª–∞—Ç–∞ ---
    if text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü" or any(kw in text_lower for kw in ["–∑–ø", "–∑–∞—Ä–ø–ª–∞—Ç", "–æ–∫–ª–∞–¥", "–¥–µ–Ω—å–≥–∏"]):
        await update.message.reply_text("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã...")
        await asyncio.sleep(1.2)  # –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        salary_msg = get_salary_info(user_id)
        await update.message.reply_text(salary_msg, parse_mode="Markdown")
        return

    # --- HR ---
    if text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å HR":
        await update.message.reply_text(
            "üìß –ù–∞–ø–∏—à–∏—Ç–µ –≤ HR-–æ—Ç–¥–µ–ª:\n"
            "‚Äî Email: hr@company.com\n"
            "‚Äî –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67"
        )
        return

    # --- –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    if text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        questions = "\n".join([f"‚Ä¢ {q}" for q in FAQ.keys()])
        await update.message.reply_text(
            f"–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{questions}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!"
        )
        return

    # --- –ü–æ–∏—Å–∫ –≤ FAQ ---
    for question, answer in FAQ.items():
        if text_lower in question.lower() or question.lower() in text_lower:
            await update.message.reply_text(answer)
            return

    # --- –ù–µ –Ω–∞–π–¥–µ–Ω–æ ---
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. üòï\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ HR."
    )

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def notify_salary_sent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ADMIN_ID or update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_salary_sent <user_id>")
        return

    try:
        target_id = int(context.args[0])
        await context.bot.send_message(
            chat_id=target_id,
            text="‚úÖ –í–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –±–∞–Ω–∫ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã."
        )
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    if not BOT_TOKEN:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("notify_salary_sent", notify_salary_sent))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–¥–º–∏–Ω ID: %s", ADMIN_ID if ADMIN_ID else "–Ω–µ –∑–∞–¥–∞–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
