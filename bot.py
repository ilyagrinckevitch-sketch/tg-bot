import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# === –ë–∞–∑–∞ FAQ (–¥–ª—è MVP ‚Äî –≤ –∫–æ–¥–µ, –ø–æ–∑–∂–µ –≤—ã–Ω–µ—Å—ë—à—å –≤ JSON/–ë–î) ===
FAQ = {
    "–∫–∞–∫ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è": "–ß—Ç–æ–±—ã —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ hr@company.com",
    "–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã": "–ü–∞—Å–ø–æ—Ä—Ç, –°–ù–ò–õ–°, –ò–ù–ù, –¥–∏–ø–ª–æ–º",
    "—Å–∫–æ–ª—å–∫–æ –∑–ø": "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –ù–∞–ø–∏—à–∏—Ç–µ '–º–æ—è –∑–ø', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à—É.",
    "–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã": "–ì—Ä–∞—Ñ–∏–∫: 5/2, —Å 9:00 –¥–æ 18:00",
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ 46 –≤–æ–ø—Ä–æ—Å–æ–≤
}

# === –§—É–Ω–∫—Ü–∏–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è?¬ª, ¬´–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?¬ª"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: "–º–æ—è –∑–ø"
    if "–º–æ—è –∑–ø" in text or "–º–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞" in text:
        salary = get_salary(user_id)
        await update.message.reply_text(salary)
        return

    # –ü–æ–∏—Å–∫ –≤ FAQ
    for question, answer in FAQ.items():
        if question in text:
            await update.message.reply_text(answer)
            return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ HR."
    )

def get_salary(user_id: int) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞: –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: SELECT salary FROM payroll WHERE telegram_id = user_id
    return "–í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2025: 87 500 ‚ÇΩ"

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ (MVP-–≤–µ—Ä—Å–∏—è) ===
async def notify_salary_sent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ user_id)
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_salary_sent <user_id>")
        return
    try:
        target_user_id = int(context.args[0])
        await context.bot.send_message(
            chat_id=target_user_id,
            text="‚úÖ –í–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –±–∞–Ω–∫ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã."
        )
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("notify_salary_sent", notify_salary_sent))  # —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
